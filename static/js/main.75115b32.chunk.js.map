{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","components/ImageGrid.js","components/Model.js","components/Title.js","hooks/useStorage.js","components/ProgressBar.js","components/UploadForm.js","App.js","index.js"],"names":["firebaseConfig","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebase","initializeApp","projectStorage","storage","projectFirestore","firestore","timeStamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelected","className","map","div","key","layout","whileHover","opacity","onClick","url","img","src","alt","initial","animate","transition","delay","Model","selected","e","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","setErr","types","type","onChange","preventDefault","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75115b32.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/storage\";\r\nimport \"firebase/firestore\";\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: API_KEY,\r\n  authDomain: \"imagegram-92765.firebaseapp.com\",\r\n  projectId: \"imagegram-92765\",\r\n  storageBucket: \"imagegram-92765.appspot.com\",\r\n  messagingSenderId: \"670602284638\",\r\n  appId: \"1:670602284638:web:6537cd59a8aefb2d566ecf\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timeStamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport { projectStorage, projectFirestore, timeStamp };\r\n","import { useState, useEffect } from \"react\";\r\nimport { projectFirestore } from \"../firebase/config\";\r\n\r\nconst useFirestore = (collection) => {\r\n  const [docs, setDocs] = useState([]);\r\n  useEffect(() => {\r\n    const unsub = projectFirestore\r\n      .collection(collection)\r\n      .orderBy(\"createdAt\", \"desc\")\r\n      .onSnapshot((snap) => {\r\n        let documents = [];\r\n        snap.forEach((doc) => {\r\n          documents.push({ ...doc.data(), id: doc.id });\r\n        });\r\n        setDocs(documents);\r\n      });\r\n    return () => {\r\n      unsub();\r\n    };\r\n  }, [collection]);\r\n  return {\r\n    docs,\r\n  };\r\n};\r\n\r\nexport default useFirestore;\r\n","import React from 'react'\r\nimport useFirestore from '../hooks/useFirestore'\r\nimport {motion} from 'framer-motion'\r\n\r\nconst ImageGrid = ({setSelected}) => {\r\n  const {docs}=useFirestore('images')\r\n  return (\r\n    <div className='img-grid'>\r\n    {  docs && docs.map(doc =>(\r\n      <motion.div className='img-wrap' key={doc.id}\r\n      layout\r\n      whileHover={{opacity:1}}\r\n      onClick={()=>setSelected(doc.url)}>\r\n        <motion.img src={doc.url} alt='uploadedpicture'\r\n        initial={{opacity:0}}\r\n        animate={{opacity:1}}\r\n        transition={{delay:1}} />\r\n      </motion.div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ImageGrid\r\n","import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst Model = ({ selected, setSelected }) => {\r\n  const handleClick = (e) => {\r\n    return e.target.classList.contains(\"backdrop\") ? setSelected(null) : null;\r\n  };\r\n  return (\r\n    <motion.div\r\n      className=\"backdrop\"\r\n      onClick={handleClick}\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n    >\r\n      <motion.img\r\n        src={selected}\r\n        alt=\"full size pic\"\r\n        initial={{ y: \"-100vh\" }}\r\n        animate={{ y: 0 }}\r\n      />\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default Model;\r\n","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>ImageGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Photograph: a picture painted by the sun without instruction in art.</p>\n      <p>“You can look at a picture for a week and never think of it again. You can also look at a picture for a second and think of it all your life.”</p>\n    </div>\n  )\n}\n\nexport default Title;","import { useState, useEffect } from \"react\";\r\nimport {\r\n  projectStorage,\r\n  projectFirestore,\r\n  timeStamp,\r\n} from \"../firebase/config\";\r\n\r\nconst useStorage = (file) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  const [url, setUrl] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const storageRef = projectStorage.ref(file.name);\r\n    const collectionRef = projectFirestore.collection(\"images\");\r\n    storageRef.put(file).on(\r\n      \"state_changed\",\r\n      (snap) => {\r\n        let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n        setProgress(percentage);\r\n      },\r\n      (err) => {\r\n        setError(err);\r\n      },\r\n      async () => {\r\n        const url = await storageRef.getDownloadURL();\r\n        const createdAt = timeStamp();\r\n        collectionRef.add({ url, createdAt });\r\n        setUrl(url);\r\n      }\r\n    );\r\n  }, [file]);\r\n  return { progress, url, error };\r\n};\r\n\r\nexport default useStorage;\r\n","import React ,{useEffect} from \"react\";\r\nimport useStorage from \"../hooks/useStorage\";\r\nimport {motion} from 'framer-motion'\r\n\r\nconst ProgressBar = ({ file, setFile }) => {\r\n  const { url, progress } = useStorage(file);\r\n  useEffect(() => {\r\n   if(url){\r\n     setFile(null)\r\n   }\r\n  }, [url,setFile])\r\n  return <motion.div className=\"progress-bar\" initial={{width:0}}\r\n  animate={{width:progress +\"%\"}}></motion.div>;\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React, { useState } from \"react\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nconst UploadForm = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [err, setErr] = useState(null);\r\n\r\n  const types = [\"image/png\", \"image/jpeg\"];\r\n\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n    let selected = e.target.files[0];\r\n    if (selected && types.includes(selected.type)) {\r\n      setFile(selected);\r\n      setErr(\"\");\r\n    } else {\r\n      setFile(null);\r\n      setErr(\"please select and image file( png or jpeg)\");\r\n    }\r\n  };\r\n  return (\r\n    <form>\r\n      <label>\r\n      <input type=\"file\" onChange={handleChange} />\r\n      <span>+</span>\r\n      </label>\r\n      <div className=\"output\">\r\n        {err && <div className=\"error\">{err}</div>}\r\n        {file && <div>{file.name}</div>}\r\n        {file && <ProgressBar file={file} setFile={setFile} />}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n","import React, { useState } from \"react\";\nimport ImageGrid from \"./components/ImageGrid\";\nimport Model from \"./components/Model\";\nimport Title from \"./components/Title\";\nimport UploadForm from \"./components/UploadForm\";\n\nfunction App() {\n  const [selected, setSelected] = useState(null);\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelected={setSelected} />\n      {selected && <Model selected={selected} setSelected={setSelected} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}